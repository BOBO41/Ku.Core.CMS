<#@ template debug="false" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Runtime" #>
<#@ Assembly Name="System.Reflection" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.Reflection" #> 
<#@ include file="manager.ttinclude"#>
<#
   var RootPath = Path.GetDirectoryName(Host.TemplateFile) + "/output";
   var entitys = new List<EntityItem>();
   entitys.Add(new EntityItem{Area= "System", Name="User", Title="用户"});
   entitys.Add(new EntityItem{Area= "System", Name="Role", Title="角色"});
   entitys.Add(new EntityItem{Area= "System", Name="UserActionLog", Title="用户操作日志"});
   entitys.Add(new EntityItem{Area= "System", Name="Function", Title="功能"});
   entitys.Add(new EntityItem{Area= "System", Name="Menu", Title="菜单"});

   entitys.Add(new EntityItem{Area= "Membership", Name="Member", Title="会员"});
	entitys.Add(new EntityItem{Area= "Membership", Name="MemberType", Title="会员类型"});

	entitys.Add(new EntityItem{Area= "WeChat", Name="WxAccount", Title="公众号"});
#>

<#
   //生成Repository
   	var path1 = RootPath + "/Vino.Core.CMS.Data/Repository";
	if(!Directory.Exists(path1))
    {
		Directory.CreateDirectory(path1);
	}

   foreach(var area in entitys.Select(x=>x.Area).Distinct().ToList())
   {
		var p = path1 + "/" + area + "/Partial";
		if(!Directory.Exists(p))
		{
			Directory.CreateDirectory(p);
		}
		var manager = new Manager(Host, GenerationEnvironment, true) { OutputPath = p};

       var items = entitys.Where(e=>e.Area.Equals(area)).ToList();
	   foreach (var item in items)
       {
			var name = item.Name;
			var desc= item.Title;
			var fileName = item.Name + "Repository.cs"; 
			manager.StartBlock(fileName);
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//
// <copyright file="I<#=fileName#>">
//        最后生成时间：<#= DateTime.Now.ToString("yyyy-MM-dd HH:mm") #>
// </copyright>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text;
using Vino.Core.Infrastructure.Data;
using Vino.Core.CMS.Data.Common;
using Vino.Core.CMS.Domain.Entity.<#=area#>;

namespace Vino.Core.CMS.Data.Repository.<#=area#>
{
    /// <summary>
    /// <#=desc#> 仓储接口
    /// </summary>
    public partial interface I<#=name#>Repository : IRepository<<#=name#>>
    {
    }

    /// <summary>
    /// <#=desc#> 仓储接口实现
    /// </summary>
    public partial class <#=name#>Repository : BaseRepository<<#=name#>>, I<#=name#>Repository
    {
        public <#=name#>Repository(VinoDbContext dbcontext) : base(dbcontext)
        {
        }
    }
}
<#
		   manager.EndBlock();
	   }
	   manager.Process(true);
   }
#>

<#
   //生成Service
   	var path2 = RootPath + "/Vino.Core.CMS.Service";
	if(!Directory.Exists(path2))
    {
		Directory.CreateDirectory(path2);
	}

   foreach(var area in entitys.Select(x=>x.Area).Distinct().ToList())
   {
		var p = path2 + "/" + area + "/Partial";
		if(!Directory.Exists(p))
		{
			Directory.CreateDirectory(p);
		}
		var manager = new Manager(Host, GenerationEnvironment, true) { OutputPath = p};

       var items = entitys.Where(e=>e.Area.Equals(area)).ToList();
	   foreach (var item in items)
       {
			var name = item.Name;
			var desc = item.Title;
			var fileName = item.Name + "Service.cs"; 
			manager.StartBlock(fileName);
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//
// <copyright file="I<#=name#>Service.cs">
//        最后生成时间：<#= DateTime.Now.ToString("yyyy-MM-dd HH:mm") #>
// </copyright>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text;
using AutoMapper;
using Vino.Core.Cache;
using Vino.Core.CMS.Data.Common;
using Vino.Core.CMS.Data.Repository.<#=area#>;

namespace Vino.Core.CMS.Service.<#=area#>
{
    public partial interface I<#=name#>Service
    {
    }

    public partial class <#=name#>Service : BaseService, I<#=name#>Service
    {
        protected readonly I<#=name#>Repository _repository;

        public <#=name#>Service(VinoDbContext context, ICacheService cache, IMapper mapper, I<#=name#>Repository repository)
            : base(context, cache, mapper)
        {
            this._repository = repository;
        }
    }
}
<#
		   manager.EndBlock();
	   }
	   manager.Process(true);
   }
#>

<#
   //生成EntityMapperProfile
   var path3 = RootPath + "/Vino.Core.CMS.Web/AutoMapper";
   var manager3 = new Manager(Host, GenerationEnvironment, true) { OutputPath = path3};
	
	if(!Directory.Exists(path3))
	{
		Directory.CreateDirectory(path3);
	}
	manager3.OutputPath = path3;
	var fileName3 = "EntityMapperProfile.cs"; 
	manager3.StartBlock(fileName3);
	#>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//
// <copyright file="EntityMapperProfile.cs">
//        最后生成时间：<#= DateTime.Now.ToString("yyyy-MM-dd HH:mm") #>
// </copyright>
//------------------------------------------------------------------------------

using AutoMapper;

namespace Vino.Core.CMS.Web.AutoMapper
{
    public class EntityMapperProfile: Profile
    {
        public EntityMapperProfile()
        {
<# foreach (var item in entitys) {
	var area = item.Area;
	var name = item.Name;
	var desc = item.Title;

#>
            CreateMap<Domain.Entity.<#=area#>.<#=name#>, Domain.Dto.<#=area#>.<#=name#>Dto>();
            CreateMap<Domain.Dto.<#=area#>.<#=name#>Dto, Domain.Entity.<#=area#>.<#=name#>>();
<# } #>
        }
    }
}
<# manager3.EndBlock();#>

<# manager3.Process(true); #>

<#
   //VinoDbContext
   var manager4 = new Manager(Host, GenerationEnvironment, true) { OutputPath = Path.GetDirectoryName(Host.TemplateFile)};
	var path4 = RootPath + "/Vino.Core.CMS.Data/Common/Partial";
	if(!Directory.Exists(path4))
	{
		Directory.CreateDirectory(path4);
	}
	manager4.OutputPath = path4;
	var fileName4 = "VinoDbContext.cs"; 
	manager4.StartBlock(fileName4);
	#>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//
// <copyright file="VinoDbContext.cs">
//        最后生成时间：<#= DateTime.Now.ToString("yyyy-MM-dd HH:mm") #>
// </copyright>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;

namespace Vino.Core.CMS.Data.Common
{
    public partial class VinoDbContext : DbContext, IDbContext
    {
        public VinoDbContext(DbContextOptions<VinoDbContext> options)
            : base(options)
        {
        }

        /// <summary>
        /// 异步保存
        /// </summary>
        /// <returns></returns>
        public async Task<int> SaveChangesAsync()
        {
            return await base.SaveChangesAsync();
        }

<# foreach (var item in entitys) {
	var area = item.Area;
	var name = item.Name;
	var desc = item.Title;
#>
        /// <summary>
        /// <#=desc#>
        /// </summary>
        public DbSet<Domain.Entity.<#=area#>.<#=name#>> <#=name#>s { get; set; }

<# } #>
    }
}
<# manager4.EndBlock();#>

<# manager4.Process(true); #>

<#+
public class EntityItem
{
	public string Area{set;get;}

	public string Name{set;get;}

	public string Title {set;get;}


}
#>