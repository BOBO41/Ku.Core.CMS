<#@ template debug="false" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Runtime" #>
<#@ Assembly Name="System.Reflection" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.Reflection" #> 
<#@ include file="manager.ttinclude"#>
<#
   var RootPath = Path.GetDirectoryName(Host.TemplateFile) + "/output";
   var entitys = new List<EntityItem>();
    //entitys.Add(new EntityItem{Area= "System", Name="User", Title="用户"});
    //entitys.Add(new EntityItem{Area= "System", Name="Role", Title="角色"});
    //entitys.Add(new EntityItem{Area= "System", Name="UserActionLog", Title="用户操作日志"});
    //entitys.Add(new EntityItem{Area= "System", Name="Function", Title="功能"});
    //entitys.Add(new EntityItem{Area= "System", Name="Menu", Title="菜单"});
    //entitys.Add(new EntityItem{Area= "System", Name="Sms", Title="短信"});
    //entitys.Add(new EntityItem{Area= "System", Name="SmsQueue", Title="短信队列"});

    //entitys.Add(new EntityItem{Area= "Membership", Name="Member", Title="会员"});
    //entitys.Add(new EntityItem{Area= "Membership", Name="MemberType", Title="会员类型"});

    //entitys.Add(new EntityItem{Area= "WeChat", Name="WxAccount", Title="公众号"});
	//entitys.Add(new EntityItem{Area= "WeChat", Name="WxMenu", Title="微信菜单"});
	//entitys.Add(new EntityItem{Area= "WeChat", Name="WxUserTag", Title="微信用户标签"});
	//entitys.Add(new EntityItem{Area= "WeChat", Name="WxUser", Title="微信用户"});
	entitys.Add(new EntityItem{Area= "WeChat", Name="WxQrcode", Title="微信二维码"});

    //entitys.Add(new EntityItem{Area= "Material", Name="Picture", Title="图片素材"});
	//entitys.Add(new EntityItem{Area= "Material", Name="MaterialGroup", Title="素材分组"});

	//entitys.Add(new EntityItem{Area= "Content", Name="Article", Title="文章"});
#>

<#
   //生成Repository
    var path1 = RootPath + "/Vino.Core.CMS.Data/Repository";
    if(!Directory.Exists(path1))
    {
        Directory.CreateDirectory(path1);
    }

   foreach(var area in entitys.Select(x=>x.Area).Distinct().ToList())
   {
        var p = path1 + "/" + area + "/Partial";
        if(!Directory.Exists(p))
        {
            Directory.CreateDirectory(p);
        }
        var manager = new Manager(Host, GenerationEnvironment, true) { OutputPath = p};

       var items = entitys.Where(e=>e.Area.Equals(area)).ToList();
       foreach (var item in items)
       {
            var name = item.Name;
            var desc= item.Title;
            var fileName = item.Name + "Repository.cs"; 
            manager.StartBlock(fileName);
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//
// <copyright file="I<#=fileName#>">
//        最后生成时间：<#= DateTime.Now.ToString("yyyy-MM-dd HH:mm") #>
// </copyright>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text;
using Vino.Core.Infrastructure.Data;
using Vino.Core.CMS.Data.Common;
using Vino.Core.CMS.Domain.Entity.<#=area#>;

namespace Vino.Core.CMS.Data.Repository.<#=area#>
{
    /// <summary>
    /// <#=desc#> 仓储接口
    /// </summary>
    public partial interface I<#=name#>Repository : IRepository<<#=name#>>
    {
    }

    /// <summary>
    /// <#=desc#> 仓储接口实现
    /// </summary>
    public partial class <#=name#>Repository : BaseRepository<<#=name#>>, I<#=name#>Repository
    {
        public <#=name#>Repository(VinoDbContext dbcontext) : base(dbcontext)
        {
        }
    }
}
<#
           manager.EndBlock();
       }
       manager.Process(true);
   }
#>


<#
   //生成Service2
    var path22 = RootPath + "/Vino.Core.CMS.Service";
    if(!Directory.Exists(path22))
    {
        Directory.CreateDirectory(path22);
    }

   foreach(var area in entitys.Select(x=>x.Area).Distinct().ToList())
   {
        var p = path22 + "/" + area;
        if(!Directory.Exists(p))
        {
            Directory.CreateDirectory(p);
        }
        var manager = new Manager(Host, GenerationEnvironment, true) { OutputPath = p};
       var items = entitys.Where(e=>e.Area.Equals(area)).ToList();
       foreach (var item in items)
       {
            var name = item.Name;
            var desc = item.Title;
            var fileName = item.Name + "Service.cs"; 
            manager.StartBlock(fileName);
#>
using AutoMapper;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Vino.Core.CMS.Data.Repository.<#=area#>;
using Vino.Core.CMS.Domain.Dto.<#=area#>;
using Vino.Core.CMS.Domain.Entity.<#=area#>;
using Vino.Core.CMS.IService.<#=area#>;
using Vino.Core.Infrastructure.Exceptions;
using Vino.Core.Infrastructure.Extensions;
using Vino.Core.Infrastructure.IdGenerator;

namespace Vino.Core.CMS.Service.<#=area#>
{
    public partial class <#=name#>Service : BaseService, I<#=name#>Service
    {
        protected readonly I<#=name#>Repository _repository;

        #region 构造函数

        public <#=name#>Service(I<#=name#>Repository repository)
        {
            this._repository = repository;
        }

        #endregion

        #region 自动生成的方法

        /// <summary>
        /// 查询数据
        /// </summary>
        /// <param name="where">查询条件</param>
        /// <param name="sort">排序</param>
        /// <returns>List<<#=name#>Dto></returns>
        public async Task<List<<#=name#>Dto>> GetListAsync(<#=name#>Search where, string sort)
        {
            var data = await _repository.QueryAsync(where.GetExpression(), sort ?? "CreateTime desc");
            return Mapper.Map<List<<#=name#>Dto>>(data);
        }

        /// <summary>
        /// 分页查询数据
        /// </summary>
        /// <param name="page">页码</param>
        /// <param name="size">条数</param>
        /// <param name="where">查询条件</param>
        /// <param name="sort">排序</param>
        /// <returns>count：条数；items：分页数据</returns>
        public async Task<(int count, List<<#=name#>Dto> items)> GetListAsync(int page, int size, <#=name#>Search where, string sort)
        {
            var data = await _repository.PageQueryAsync(page, size, where.GetExpression(), sort ?? "CreateTime desc");
            return (data.count, Mapper.Map<List<<#=name#>Dto>>(data.items));
        }

        /// <summary>
        /// 根据主键取得数据
        /// </summary>
        /// <param name="id">主键</param>
        /// <returns></returns>
        public async Task<<#=name#>Dto> GetByIdAsync(long id)
        {
            return Mapper.Map<<#=name#>Dto>(await this._repository.GetByIdAsync(id));
        }

        /// <summary>
        /// 保存数据
        /// </summary>
        public async Task SaveAsync(<#=name#>Dto dto)
        {
            <#=name#> model = Mapper.Map<<#=name#>>(dto);
            if (model.Id == 0)
            {
                //新增
                model.Id = ID.NewID();
                model.CreateTime = DateTime.Now;
                model.IsDeleted = false;
                await _repository.InsertAsync(model);
            }
            else
            {
                //更新
                var item = await _repository.GetByIdAsync(model.Id);
                if (item == null)
                {
                    throw new VinoDataNotFoundException("无法取得<#=desc#>数据！");
                }

                //TODO:这里进行赋值

                _repository.Update(item);
            }
            await _repository.SaveAsync();
        }

        /// <summary>
        /// 删除数据
        /// </summary>
        /// <param name="id">主键</param>
        /// <returns></returns>
        public async Task DeleteAsync(long id)
        {
            await _repository.DeleteAsync(id);
            await _repository.SaveAsync();
        }

        #endregion

        #region 其他方法

        #endregion
    }
}
<#
           manager.EndBlock();
       }
       manager.Process(true);
   }
#>

<#
   //生成IService
   var path33 = RootPath + "/Vino.Core.CMS.IService";
   foreach(var area in entitys.Select(x=>x.Area).Distinct().ToList())
   {
        var p = path33 + "/" + area;
        if(!Directory.Exists(p))
        {
            Directory.CreateDirectory(p);
        }
        var manager = new Manager(Host, GenerationEnvironment, true) { OutputPath = p};
       var items = entitys.Where(e=>e.Area.Equals(area)).ToList();
       foreach (var item in items)
       {
            var name = item.Name;
            var desc = item.Title;
            var fileName = "I" + item.Name + "Service.cs"; 
            manager.StartBlock(fileName);
#>
using System.Collections.Generic;
using System.Threading.Tasks;
using Vino.Core.CMS.Domain.Dto.<#=area#>;
using Vino.Core.CMS.Domain.Entity.<#=area#>;

namespace Vino.Core.CMS.IService.<#=area#>
{
    public partial interface I<#=name#>Service
    {
        #region 自动创建的接口

        /// <summary>
        /// 查询数据
        /// </summary>
        /// <param name="where">查询条件</param>
        /// <param name="sort">排序</param>
        /// <returns>List<<#=name#>Dto></returns>
        Task<List<<#=name#>Dto>> GetListAsync(<#=name#>Search where, string sort);

        /// <summary>
        /// 分页查询数据
        /// </summary>
        /// <param name="page">页码</param>
        /// <param name="size">条数</param>
        /// <param name="where">查询条件</param>
        /// <param name="sort">排序</param>
        /// <returns>count：条数；items：分页数据</returns>
        Task<(int count, List<<#=name#>Dto> items)> GetListAsync(int page, int size, <#=name#>Search where, string sort);

        /// <summary>
        /// 根据主键取得数据
        /// </summary>
        /// <param name="id">主键</param>
        /// <returns></returns>
        Task<<#=name#>Dto> GetByIdAsync(long id);

        /// <summary>
        /// 保存数据
        /// </summary>
        Task SaveAsync(<#=name#>Dto dto);

        /// <summary>
        /// 删除数据
        /// </summary>
        /// <param name="id">主键</param>
        /// <returns></returns>
        Task DeleteAsync(long id);

        #endregion

        #region 其他接口

        #endregion
    }
}
<#
           manager.EndBlock();
       }
       manager.Process(true);
   }
#>


<#
   //生成Entity
   var path44 = RootPath + "/Vino.Core.CMS.Domain/Entity";
   foreach(var area in entitys.Select(x=>x.Area).Distinct().ToList())
   {
        var p = path44 + "/" + area;
        if(!Directory.Exists(p))
        {
            Directory.CreateDirectory(p);
        }
        var manager = new Manager(Host, GenerationEnvironment, true) { OutputPath = p};
       var items = entitys.Where(e=>e.Area.Equals(area)).ToList();
       foreach (var item in items)
       {
            var name = item.Name;
            var desc = item.Title;
            var fileName = item.Name + ".cs"; 
            manager.StartBlock(fileName);
#>
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Vino.Core.Infrastructure.Attributes;
using Vino.Core.Infrastructure.Data;

namespace Vino.Core.CMS.Domain.Entity.<#=area#>
{
    [Table("<#=area#>_<#=name#>")]
    public class <#=name#> : BaseProtectedEntity
    {

    }

    public class <#=name#>Search : BaseSearch<<#=name#>>
    {

    }
}
<#
           manager.EndBlock();
       }
       manager.Process(true);
   }
#>


<#
   //生成Dto
   var path55 = RootPath + "/Vino.Core.CMS.Domain/Dto";
   foreach(var area in entitys.Select(x=>x.Area).Distinct().ToList())
   {
        var p = path55 + "/" + area;
        if(!Directory.Exists(p))
        {
            Directory.CreateDirectory(p);
        }
        var manager = new Manager(Host, GenerationEnvironment, true) { OutputPath = p};
       var items = entitys.Where(e=>e.Area.Equals(area)).ToList();
       foreach (var item in items)
       {
            var name = item.Name;
            var desc = item.Title;
            var fileName = item.Name + "Dto.cs"; 
            manager.StartBlock(fileName);
#>
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Vino.Core.Infrastructure.Attributes;
using Vino.Core.Infrastructure.Data;

namespace Vino.Core.CMS.Domain.Dto.<#=area#>
{
    public class <#=name#>Dto : BaseDto
    {

    }
}
<#
           manager.EndBlock();
       }
       manager.Process(true);
   }
#>


<#
   //生成EntityMapperProfile
   var path3 = RootPath + "/Vino.Core.CMS.Web/AutoMapper";
   var manager3 = new Manager(Host, GenerationEnvironment, true) { OutputPath = path3};
    
    if(!Directory.Exists(path3))
    {
        Directory.CreateDirectory(path3);
    }
    manager3.OutputPath = path3;
    var fileName3 = "EntityMapperProfile.cs"; 
    manager3.StartBlock(fileName3);
    #>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//
// <copyright file="EntityMapperProfile.cs">
//        最后生成时间：<#= DateTime.Now.ToString("yyyy-MM-dd HH:mm") #>
// </copyright>
//------------------------------------------------------------------------------

using AutoMapper;

namespace Vino.Core.CMS.Web.AutoMapper
{
    public class EntityMapperProfile: Profile
    {
        public EntityMapperProfile()
        {
<# foreach (var item in entitys) {
    var area = item.Area;
    var name = item.Name;
    var desc = item.Title;

#>
            CreateMap<Domain.Entity.<#=area#>.<#=name#>, Domain.Dto.<#=area#>.<#=name#>Dto>();
            CreateMap<Domain.Dto.<#=area#>.<#=name#>Dto, Domain.Entity.<#=area#>.<#=name#>>();
<# } #>
        }
    }
}
<# manager3.EndBlock();#>

<# manager3.Process(true); #>

<#
   //VinoDbContext
   var manager4 = new Manager(Host, GenerationEnvironment, true) { OutputPath = Path.GetDirectoryName(Host.TemplateFile)};
    var path4 = RootPath + "/Vino.Core.CMS.Data/Common/Partial";
    if(!Directory.Exists(path4))
    {
        Directory.CreateDirectory(path4);
    }
    manager4.OutputPath = path4;
    var fileName4 = "VinoDbContext.cs"; 
    manager4.StartBlock(fileName4);
    #>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//
// <copyright file="VinoDbContext.cs">
//        最后生成时间：<#= DateTime.Now.ToString("yyyy-MM-dd HH:mm") #>
// </copyright>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;

namespace Vino.Core.CMS.Data.Common
{
    public partial class VinoDbContext : DbContext, IDbContext
    {
        public VinoDbContext(DbContextOptions<VinoDbContext> options)
            : base(options)
        {
        }

        /// <summary>
        /// 异步保存
        /// </summary>
        /// <returns></returns>
        public async Task<int> SaveChangesAsync()
        {
            return await base.SaveChangesAsync();
        }

<# foreach (var item in entitys) {
    var area = item.Area;
    var name = item.Name;
    var desc = item.Title;
#>
        /// <summary>
        /// <#=desc#>
        /// </summary>
        public DbSet<Domain.Entity.<#=area#>.<#=name#>> <#=name#>s { get; set; }

<# } #>
    }
}
<# manager4.EndBlock();#>

<# manager4.Process(true); #>

<#+
public class EntityItem
{
    public string Area{set;get;}

    public string Name{set;get;}

    public string Title {set;get;}


}
#>